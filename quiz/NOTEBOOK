#    SPDX-FileCopyrightText: 2024 vNishimura <vitor.vian@usp.br>
#   
#    SPDX-License-Identifier: GPL-3.0-or-later

# p1
The "main's" memory address is different in each execution of the program "p1.c" due to the ASLR (Address Space Layout Randomization), a computer security technique employed by operating systems and applications to randomly arrange the positions of key data areas, such as the base of the executable and the positions of libraries, heap, and stack, in a process's address space. This randomization helps prevent attackers from reliably predicting target addresses, making it harder to exploit vulnerabilities like buffer overflows and other types of memory corruption attacks.

# p2
When we first run the "p2" program, we gain access with the correct password "foo". But, if we use an incorrect password with enough length, the function "scanf", wrongly used in this case to read the input string, "invades" the stack's space where the variable "verified" is allocated. This vulnerability is called *Buffer Overflow* and allows the user to manipulate unauthorized memory. In this case, the string changes the int "verified" to a non-zero value, considered true in the code.

To fix this vulnerability, analyzing only the code's scope, we can simply use the "fgets" function to read the input string. "fgets" specifies the maximum length of the string, ensuring that the string is allocated in a space destined to it and not overflowing other variables.

In the second time we run the program, using the '-fstack-protector' flag, the program recognizes the "youshallnotpass" string as an incorrect password, but no stack smash is detected by the canary. This situation probably occured because the buffer overflow didn't changed the canary, but also didn`t changed the "verified" variable.

# p3
```
0804918d <main>:
 804918d:	55                   	push   %ebp
 804918e:	89 e5                	mov    %esp,%ebp
 8049190:	83 e4 f0             	and    $0xfffffff0,%esp
 8049193:	e8 07 00 00 00       	call   804919f <foo>
 8049198:	b8 00 00 00 00       	mov    $0x0,%eax
 804919d:	c9                   	leave  
 804919e:	c3                   	ret    

0804919f <foo>:
 804919f:	55                   	push   %ebp
 80491a0:	89 e5                	mov    %esp,%ebp
 80491a2:	83 ec 18             	sub    $0x18,%esp
 80491a5:	8b 45 08             	mov    0x8(%ebp),%eax
 80491a8:	83 c0 01             	add    $0x1,%eax
 80491ab:	83 ec 0c             	sub    $0xc,%esp
 80491ae:	50                   	push   %eax
 80491af:	e8 0b 00 00 00       	call   80491bf <bar>
 80491b4:	83 c4 10             	add    $0x10,%esp
 80491b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
 80491ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80491bd:	c9                   	leave  
 80491be:	c3                   	ret    

080491bf <bar>:
 80491bf:	55                   	push   %ebp
 80491c0:	89 e5                	mov    %esp,%ebp
 80491c2:	83 ec 10             	sub    $0x10,%esp
 80491c5:	8b 45 08             	mov    0x8(%ebp),%eax
 80491c8:	83 c0 01             	add    $0x1,%eax
 80491cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
 80491ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
 80491d1:	c9                   	leave  
 80491d2:	c3                   	ret
 ```

a) 
In this case, the foo function pushes the value of %eax in the stack, so the bar func can use this param.
This process is standardized by function calling conventions for a specific architecture (like x86) and operating system. In 32-bit x86, arguments are pushed onto the stack in right-to-left order during function calls. The ABI (Application Binary Interface) ensures different code modules (compiled by different tools) can work together by defining how arguments and return values are handled.  

b)
The bar function, using the %eax, pushes the value to the stack. So, like said in the previous exercise, this values should be in the stack during function calls

c)
The first two lines are used to create a new stack-frame. The first line pushes the previous function base pointer to the stack and the second configure base pointer to the current stack pointer.

The second-to-last are used to load the returned value to the stack

d)
The third line in the foo and bar function are used to allocate bytes to the local variable, to ensure that will have enough space. The third line in the main function is used to ensure that the %esp is 16 byte multiple, to comply with the x86 ABI.

e)
To ensure the return value in the eax register (32-bit) matches the new data type of the bar function, the instruction movsbl %al,%eax was added. This instruction expands the 1-byte value in al (likely a char) to fill all 4 bytes of eax.

# p4
a)
All results were 'Foo'

b)
p4-v1 - 15020: include all code from p4, p4a and p4b
p4-v2 - 14980: includes libp4.a (statically linked library)
p4-v3 - 14924: dynamically links libp4.so, which contains only references to p4a and p4b

c)
p4-v1: bar and foo and listed as T
p4-v2: only foo are listed as T
p4-v3: both are undefined

d)
The binaries p4-v1 and p4-v2 require the library libc.so.6, while p4-v3 requires both libc.so.6 and libp4.so.

e)
1) The executable program should be installed in other hosts

Static Libraries:
Pros: The executable contains all library code required
Cons: Executables will be larger because they include all code

Dynamic libraries:
Pros: Smaller executables because they rely on shared libraries
Cons: Need the compatible versions of the shared libraries in the system

2) The library is updated:

Static Libraries:
Pros: Each application has its version of the library
Cons: Updating requires rebuilding and redistributing each application that uses the library

Dynamic libraries:
Pros: Updating the shared library affects all applications
Cons: Updates may introduce compatibility issues

3) The library should be used by many different programs running in the same host.

Static Libraries:
Pros: Each application has its copy of the library
Cons: Multiple copies of the library in the system

Dynamic libraries:
Pros: Ensures all applications benefit from bug fixes and improvements
Cons: Different applications may require different versions of the library